import 'pixi-sound'
import PIXI from '#/pixi'
import { classname } from '#/utils'
import { imageLoader as spineImageLoader } from './loader/spine'
import fontLoader from './loader/font'

let $res

class ResManager extends PIXI.loaders.Loader {
  constructor(...args) {
    super(...args)

    this.use(fontLoader)
  }

  /**
   * Register metadata of resources generated by res/scan.val.js
   */
  static register(res) {
    $res = res
  }

  get res() {
    return $res
  }

  /**
   * delegate methods of $res
   */
  url(name) {
    return $res.url(name)
  }

  /**
   * Add an image into loading queue.
   */
  addImage(name) {
    if (this.resources[name]) return
    this.add(...$res.nu(name))
  }

  /**
   * Add a font into loading queue.
   */
  addFont(name) {
    if (this.resources[name]) return
    this.add(...$res.nu(name))
  }

  /**
   * Add a sound into loading queue
   */
  addSound(name) {
    if (this.resources[name]) return
    this.add(...$res.nu(name))
  }

  /**
   * Add a spine into loading queue.
   */
  addSpine(name) {
    if (this.resources[name]) return

    const json = $res.url(name, { type: 'json' })
    const atlas = $res.url(name, { type: 'atlas' })
    this.add(name, json, {
      metadata: {
        spineAtlasFile: atlas,
        imageLoader: spineImageLoader,
      },
    })
  }

  texture(name) {
    const resource = this.resources[name]
    if (!resource) {
      throw new Error(`[${classname(this)}] missing texture - ${name}`)
    } else {
      return resource.texture
    }
  }

  sound(name) {
    const resource = this.resources[name]
    return resource.sound
  }

  spine(name) {
    const resource = this.resources[name]
    if (!resource) {
      throw new Error(`[${classname(this)}] missing spine - ${name}`)
    } else {
      return resource.spineData
    }
  }
}

ResManager.default = new ResManager()

export default ResManager
