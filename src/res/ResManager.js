import 'pixi-sound'
import PIXI from '#/pixi'
import { classname } from '#/utils'
import { advancedImageLoader } from './spine'
import fontLoader from './loader/font'

const { loaders } = PIXI

let _res

class ResManager extends loaders.Loader {
  constructor(...args) {
    super(...args)

    this.use(fontLoader)
  }

  /**
   * Register metadata of resources generated by res/scan
   */
  register(res) {
    _res = res
  }

  /**
   * Add an image into loading queue.
   */
  addImage(name) {
    if (this.resources[name]) return
    this.add(..._res.nu(name))
  }

  /**
   * Add a font into loading queue.
   */
  addFont(name) {
    if (this.resources[name]) return
    this.add(..._res.nu(name))
  }

  /**
   * Add a sound into loading queue
   */
  addSound(name) {
    if (this.resources[name]) return
    this.add(..._res.nu(name))
  }

  /**
   * Add a spine into loading queue.
   */
  addSpine(name) {
    if (this.resources[name]) return

    const json = _res.url(name, { type: 'json' })
    const atlas = _res.url(name, { type: 'atlas' })
    this.add(name, json, {
      metadata: {
        spineAtlasFile: atlas,
        imageLoader: advancedImageLoader,
      },
    })
  }

  texture(name) {
    const resource = this.resources[name]
    if (!resource) {
      throw new Error(`[${classname(this)}] missing texture - ${name}`)
    } else {
      return resource.texture
    }
  }

  sound(name) {
    const resource = this.resources[name]
    return resource.sound
  }

  spine(name) {
    const resource = this.resources[name]
    if (!resource) {
      throw new Error(`[${classname(this)}] missing spine - ${name}`)
    } else {
      return resource.spineData
    }
  }
}

ResManager.default = new ResManager()

export default ResManager
